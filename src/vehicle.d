/*
Copyright (c) 2021-2022 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module vehicle;

import std.stdio;
import std.math;
import std.random;

import dagon;
import dagon.ext.newton;
import wheel;

class Vehicle: EntityComponent
{
    NewtonPhysicsWorld world;
    NewtonCollisionShape chassisShape;
    NewtonRigidBody chassisBody;
    Array!Wheel wheels;
    float torque = 0.0f;
    float maxTorque = 4000.0f;
    float torqueDecreaseStep = 10.0f;
    Matrix4x4f prevTransformation;
    
    this(NewtonPhysicsWorld world, Entity entity, NewtonCollisionShape shape, float mass, int materialID)
    {
        super(world.eventManager, entity);
        this.world = world;
        
        this.chassisShape = shape;
        
        chassisBody = world.createDynamicBody(this.chassisShape, mass);
        chassisBody.position = entity.position;
        chassisBody.rotation = entity.rotation;
        chassisBody.transformation =
            translationMatrix(entity.position) *
            entity.rotation.toMatrix4x4;
        chassisBody.raycastable = false;
        chassisBody.groupId = materialID;
        
        NewtonBodySetContinuousCollisionMode(chassisBody.newtonBody, 1);
        NewtonBodySetMatrix(chassisBody.newtonBody, chassisBody.transformation.arrayof.ptr);
        NewtonMaterialSetDefaultFriction(world.newtonWorld, 0, materialID, 0.2f, 0.2f);
        NewtonMaterialSetDefaultElasticity(world.newtonWorld, 0, materialID, 0.2f);
        
        prevTransformation = Matrix4x4f.identity;
    }
    
    Wheel addWheel(Vector3f suspPosition, float radius, float facing, bool isPowered, bool isSteered)
    {
        auto wheel = New!Wheel(this);
        wheel.radius = radius;
        wheel.facing = facing;
        wheel.suspension.position = suspPosition;
        wheel.isPowered = isPowered;
        wheel.isSteered = isSteered;
        wheels.append(wheel);
        return wheel;
    }
    
    bool gas = false;
    bool brake = false;
    
    void accelerate(float t)
    {
        gas = true;
        torque += t;
        
        float forwardSpeed = dot(chassisBody.velocity, chassisBody.transformation.forward);
        if (sign(t) != sign(forwardSpeed))
            brake = true;
        else
            brake = false;
    }
    
    void steer(float angle)
    {
        foreach(i, w; wheels)
        {
            if (w.isSteered)
            {
                float coef = 1.0f;
                w.steeringAngle += angle * coef;
                
                if (w.steeringAngle > w.maxSteeringAngle)
                    w.steeringAngle = w.maxSteeringAngle;
                if (w.steeringAngle < -w.maxSteeringAngle)
                    w.steeringAngle = -w.maxSteeringAngle;
            }
        }
    }
    
    void setSteering(float normalizedAngle)
    {
        foreach(i, w; wheels)
        {
            if (w.isSteered)
            {
                w.steeringAngle = normalizedAngle * w.maxSteeringAngle;
                
                if (w.steeringAngle > w.maxSteeringAngle)
                    w.steeringAngle = w.maxSteeringAngle;
                if (w.steeringAngle < -w.maxSteeringAngle)
                    w.steeringAngle = -w.maxSteeringAngle;
            }
        }
    }
    
    void stop()
    {
        torque = 0.0f;
        brake = true;
    }
    
    Vector3f position() @property
    {
        return chassisBody.position.xyz;
    }
    
    Quaternionf rotation() @property
    {
        return chassisBody.rotation;
    }
    
    Matrix4x4f transformation() @property
    {
        return chassisBody.transformation;
    }
    
    Vector3f velocity() @property
    {
        return chassisBody.velocity;
    }
    
    float speed() @property
    {
        return chassisBody.velocity.length;
    }
    
    float speedKMH() @property
    {
        return chassisBody.velocity.length * 3.6;
    }
    
    void reset()
    {
        Vector3f pos = position;
        pos.y += 1.0f;
        auto transformation = translationMatrix(pos);
        NewtonBodySetMatrix(chassisBody.newtonBody, transformation.arrayof.ptr);
    }
    
    ~this()
    {
        wheels.free();
    }
    
    override void update(Time t)
    {
        float torqueSign = sign(torque);
        float absTorque = abs(torque);
        if (absTorque > maxTorque)
            absTorque = maxTorque;
        
        if (!gas)
            absTorque = 0.0f;
        
        gas = false;
        
        torque = absTorque * torqueSign;
        
        uint numPoweredWheels = 0;
        foreach(i, w; wheels)
        {
            if (w.isPowered)
            numPoweredWheels++;
        }
        
        foreach(w; wheels)
        {
            w.brake = brake;
            w.torque = torque / cast(float)numPoweredWheels;
        }
        
        foreach(w; wheels)
        {
            w.update(t.delta);
        }
        
        chassisBody.update(t.delta);

        entity.prevTransformation = prevTransformation;

        entity.position = chassisBody.position.xyz;
        entity.transformation = chassisBody.transformation * scaleMatrix(entity.scaling);
        entity.invTransformation = entity.transformation.inverse;
        entity.rotation = chassisBody.rotation;

        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;

        prevTransformation = entity.transformation;
    }
}
