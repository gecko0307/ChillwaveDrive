/*
Copyright (c) 2021-2022 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module view;

import std.math;
import std.random;

import dagon;
import vehicle;

class VehicleViewComponent: EntityComponent
{
    Vehicle vehicle;
    Vector3f targetPosition;
    Vector3f position;
    Vector3f offset;
    
    int oldMouseX;
    int oldMouseY;
    
    bool active = true;
    bool mouseActive = true;
    
    float mouseSensibility = 0.1f;
    
    float boostFactor = 0.0f;

    this(EventManager em, Entity e, Vehicle vehicle)
    {
        super(em, e);
        
        this.vehicle = vehicle;
        offset = Vector3f(0.0f, 0.0f, 1.0f);
        position = vehicle.position + offset;
        targetPosition = vehicle.position + vehicle.transformation.forward * -4.0f;
        
        oldMouseX = eventManager.windowWidth / 2;
        oldMouseY = eventManager.windowHeight / 2;
    }
    
    override void update(Time time)
    {
        processEvents();
        
        if (active & mouseActive)
        {
            float turnAngle = (eventManager.mouseX - oldMouseX) * mouseSensibility;
            Quaternionf mouseRotation = rotationQuaternion!float(Axis.y, turnAngle * time.delta);
            offset = mouseRotation.rotate(offset);
            eventManager.setMouse(oldMouseX, oldMouseY);
        }
        
        float minSpeed = 2.0f;
        float maxSpeed = 15.0f;
        float speedFactor = clamp((vehicle.speed - minSpeed) / (maxSpeed - minSpeed), 0.0f, 1.0f);
        boostFactor = clamp((vehicle.speed - 30.0f) / (50.0f - 30.0f), 0.0f, 1.0f);
        
        float faceDistance = lerp(4.5f, lerp(3.5f, 0.0f, boostFactor), speedFactor);
        Vector3f facePosition = (offset.normalized * -faceDistance) * vehicle.transformation;
        
        targetPosition = facePosition;
        
        Vector3f tp = targetPosition;
        tp.y = vehicle.position.y + 1.5f;
        Vector3f d = tp - position;
        position += d * 0.2f;
        
        Vector3f viewFrom = position;
        Vector3f viewTo = vehicle.position + Vector3f(0, 1.0f, 0);
        Vector3f viewDir = (viewTo - viewFrom).normalized;
        Vector3f viewUp = Vector3f(0, 1, 0);
        Vector3f viewRight = cross(viewDir, viewUp);
        
        float shakeAmplitude = uniform(0.01f, 0.05f);
        float shakeFreq = uniform(6.0f, 10.0f);
        double t = time.elapsed * shakeFreq;
        Vector2f shakeVec = Vector2f(sin(t) * shakeAmplitude, cos(t) * shakeAmplitude);
        Vector3f noShake = Vector3f(0.0f, 0.0f, 0.0f);
        Vector3f shake = viewRight * shakeVec.x + viewUp * shakeVec.y;
        shake = lerp(noShake, shake, boostFactor);
        
        Matrix4x4f trans = lookAtMatrix(viewFrom, viewTo, Vector3f(0, 1, 0));
        
        entity.transformation = trans.inverse;
        entity.invTransformation = trans;
        
        entity.absoluteTransformation = entity.transformation;
        entity.invAbsoluteTransformation = entity.invTransformation;
        entity.prevAbsoluteTransformation = entity.prevTransformation;
    }
}
